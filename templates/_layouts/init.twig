{% minify %}

{#
  Initialize Global Env
#}

{% set cacheableEnv = craft.app.request.getParam('nocache') is same as(NULL)
  and not craft.app.request.isPost
  and not (doNotCache ?? false)
  and not (
    (craft.app.session.isActive or craft.app.session.hasSessionId)
    and (craft.app.session.hasFlash('error') or craft.app.session.hasFlash('notice'))
  )
%}
{% set cacheflags = cacheflags ?? 'entries|assets|globals|categories|users' %}
{% set cacheKeyPrefix = getenv('APP_ID') ~ ':v1' %}



{% set queries = {} %}
{% set themes = {} %}
{% set eagerload = {} %}

{% set assetManifest = source('_manifest.json')|json_decode %}
{% set sriManifest = source('_manifest-sri.json')|json_decode %}
{% set styles = [
  devMode ? 'style.css' : 'style.purged.min.css',
]|map(s => {
  href: alias('@assetBaseUrl/build/' ~ s|replace('.css', ".#{assetManifest[s]}.css")),
  integrity: sriManifest[s],
  crossorigin: 'anonymous',
  rel: 'stylesheet',
}) %}
{# Add external stylesheets.
  Example:
  ```
  {% set externalStyles = [{
    href: 'https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400i|IBM+Plex+Sans:400,500,700&amp;display=swap',
    async: true,
  }] %}
  ```
#}
{% set externalStyles = [] %}
{% set scripts = {
  'urgent.min.js': 'async',
  'deferred.min.js': 'async',
  'instant.min.js': 'module',
  'photoswipeinit.min.js': 'module',
}|map((type, s) => {
  src: alias('@assetBaseUrl/build/' ~ s|replace('.js', ".#{assetManifest[s]}.js")),
  integrity: sriManifest[s],
  crossorigin: 'anonymous',
  async: type == 'async',
  type: type == 'module' ? type : false,
}) %}



{#
  If the request is for <link rel=prefetch>
  then make sure the response is micro-cacheable
#}
{% set requestHeaders = craft.app.request.headers %}
{% set purposeHeaders = [
  requestHeaders.get('Purpose'),
  requestHeaders.get('X-Purpose'),
  requestHeaders.get('X-moz'),
  requestHeaders.get('Sec-Purpose'),
] %}
{% if 'prefetch' in purposeHeaders %}
  {% set expireInSeconds = 5 %}
  {% header "Cache-Control: max-age=" ~ expireInSeconds %}
  {% header "Pragma: cache" %}
  {% header "Expires: " ~ now|date_modify("+#{expireInSeconds} seconds")|httpdate('GMT') %}
{% endif %}



{%- block response_buffer -%}
  
  {% set htmlCacheKey = cacheKeyPrefix
    ~ '-css:' ~ assetManifest['style.purged.min.css']
    ~ '-js:' ~ assetManifest['urgent.min.js'] ~ assetManifest['deferred.min.js']
    ~ '-html:v1' %}
  
  {# Figure out if page should be cached #}
  {%- if cacheableEnv %}
    
    {# If a cacheKey is set, use that to globally cache the rendered page #}
    {% if cacheKey ?? false %}
      {% cacheflag flagged cacheflags globally using key (htmlCacheKey ~ ':' ~ cacheKey) for 1 month %}
        {{- block('response') -}}
      {% endcacheflag %}
      
    {% else %}
      
      {# No cacheKey set, cache the rendered page by url (not globally) #}
      {% cacheflag flagged cacheflags using key htmlCacheKey for 1 month %}
        {{- block('response') -}}
      {% endcacheflag %}
    {% endif %}
    
  {% else %}
    {%- block response %}{% endblock -%}
  {% endif %}
{%- endblock -%}

{% endminify -%}
