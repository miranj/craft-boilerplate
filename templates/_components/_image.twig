{# _components/_image #}

{#
  Image
  
  Generate image transforms and render images
  
  @param   asset        {AssetFileModel}    Image asset to be rendered
  @param   preset       {string}            Image usage preset
  @param   class        {string}            Class names to apply to the img tag
  @param   alt          {string}            Value of the alt attribute for the img tag
  @param   lazyload     {bool}              Lazyload image or not
#}



{# Parameters #}
{% set imageAsset = params.asset ?? false %}
{% set imageBreakpointAssets = params.breakpoint_assets ?? {} %}
{% set imagePreset = params.preset ?? false %}
{% set imageClass = params.class ?? '' %}
{% set imageAlt = params.alt ?? false %}
{% set imageLazyload = params.lazyload ?? true %}
{% set imageIsCss = not not (params.background ?? false) %}
{% set imageCssClass = params.background ?? '' %}
{% set imageGenerateWebp = (params.webp ?? true) and craft.imager.serverSupportsWebp %}



{# Config #}
{% set queries = {
  '--xs-plus':  '(min-width:' ~  448 ~ 'px)',
  '--sm-plus':  '(min-width:' ~  900 ~ 'px)',
  '--md-plus':  '(min-width:' ~ 1188 ~ 'px)',
  '--lg-plus':  '(min-width:' ~ 1920 ~ 'px)',
  '--retina':   '(min-resolution: 192dpi)',
} %}
{% set presets = {} %}



{# Biz logic #}
{% if imageAsset %}
  {% set imageDefault = null %}
  {% set imageSizesGuide = false %}
  {% set imageTransforms = [] %}
  {% set imageSources = [] %}
  {% set imageColour = 'transparent' %}
  {% set imageAlt = imageAlt ?: imageAsset.title %}
  {% set imageIsSvg = imageAsset.mimeType in ['image/svg+xml'] or imageAsset.extension in ['svg'] %}
  {% set imageIsAnimatedGif = imageAsset.extension in ['gif'] and craft.imager.isAnimated(imageAsset) %}
  {% set imageScaleFactor = imageIsSvg ? 100 : 1 %}

  {# Assign an empty preset, and a single breakpoint if one isn't defined #}
  {% set preset = presets[imagePreset] ?? {} %}
  {% set breakpoints = preset.breakpoints ?? [preset] %}
  {% if devMode
    and imageAsset.mimeType not in ['image/svg+xml']
    and (imagePreset is empty or preset is empty)
  %}
    <span class="block bg-theme-red text-white all-caps">
      Warning: No Image Preset
    </span>
  {% endif %}
  
  {# Ensure all breakpoints which have asset overrides are present in the breakpoints array #}
  {% if imageBreakpointAssets is not empty %}
    {% for mediaQuery, mediaAsset in imageBreakpointAssets %}
      {% if not breakpoints|contains('media', mediaQuery) %}
        {% set breakpoints = [preset|merge({ media: mediaQuery })]|merge(breakpoints) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% set imageGenerateWebp = imageGenerateWebp and not craft.imager.isAnimated(imageAsset) %}
  {% set imageIsCwebpSupported = imageAsset.mimeType in ['image/jpeg', 'image/png', 'image/tiff']
    or imageAsset.extension in ['jpg', 'jpeg', 'jfif', 'pjpeg', 'pjp', 'png', 'tif', 'tiff'] %}
  
  {% for imagePreset in breakpoints %}
    {% set _imageAsset = imageBreakpointAssets
      and imagePreset.media is defined
      and imageBreakpointAssets[imagePreset.media] is defined
      ? imageBreakpointAssets[imagePreset.media]
      : imageAsset %}
    {% set imageIsSvg = _imageAsset.mimeType in ['image/svg+xml'] or _imageAsset.extension in ['svg'] %}
    {% set imageIsAnimatedGif = _imageAsset.extension in ['gif'] and craft.imager.isAnimated(_imageAsset) %}
    {% set imageScaleFactor = imageIsSvg ? 100 : 1 %}
    {% set imageSizesGuide = (imagePreset.guide ?? '')|replace(queries) ?: false %}
    {% set imageSourcesMedia = (imagePreset.media ?? '(min-width: 0)')|replace(queries) %}
    
    {% if not (imageIsSvg or imageIsAnimatedGif) %}
      {% set imageTransformSizes = imagePreset.sizes ?? [{ width: _imageAsset.width }] %}
      {% set imageTransformParams = {
        position: _imageAsset.getFocalPoint(),
      } | merge(imagePreset.transform ?? {}) %}
      {% set imageTransforms = craft.imager.transformImage(
        _imageAsset,
        imageTransformSizes,
        imageTransformParams
        ) %}
      {% set imageDefault = imageTransforms|last %}
      
      {# Generate WebP versions and put them before regular ones #}
      {% if imageGenerateWebp %}
        {% set imageTransformsWebP = craft.imager.transformImage(
          imageIsCwebpSupported
            ? _imageAsset
            : craft.imager.transformImage(_imageAsset, { format: 'png' }),
          imageTransformSizes,
          imageTransformParams|merge({ format: 'webp' })
        ) %}
        {% set imageSources = imageSources|merge([{
          type: 'image/webp',
          media: imageSourcesMedia,
          transforms: imageTransformsWebP,
        }]) %}
      {% endif %}
    {% else %}
      {% set imageTransforms = [_imageAsset] %}
      {% set imageDefault = _imageAsset %}
    {% endif %}
    
    {% if imagePreset.media is defined %}
      {% set imageSources = imageSources|merge([{
        media: imageSourcesMedia,
        transforms: imageTransforms,
      }]) %}
    {% endif %}
  {% endfor %}
{% else %}
  {% set imageDefault = imageAsset %}
{% endif %}
{% set imageIsResponsive = imageSources|length - (craft.imager.serverSupportsWebp ? 1 : 0) > 0 %}



{# Output #}
{% if imageAsset and not imageIsCss %}
  {% if imageSources|length %}
    <picture>
  {% endif %}
  
  {% if imageLazyload %}
    {# Non JS fallback #}
    <noscript>
      {{ tag('img', {
        class: imageClass,
        src: imageDefault.url,
        alt: imageAlt|e('html_attr'),
        width: imageDefault.width * imageScaleFactor,
        height: imageDefault.height * imageScaleFactor,
      }) }}
    </noscript>
  {% endif %}
  
  {% for source in imageSources %}
    {% set lastTransform = source.transforms|last %}
    <!--[if IE 9]><audio><![endif]-->
    {{ tag('source', {
      media: source.media,
      type: source.type ?? false,
      width: lastTransform.width,
      height: lastTransform.height,
      srcset: source.transforms|length > 1 ? craft.imager.srcset(source.transforms) : lastTransform.url,
      
    } | merge(imageLazyload ? {
      srcset: craft.imager.placeholder({
        width: lastTransform.width,
        height: lastTransform.height,
        color: imageColour
      }),
      'data-srcset': source.transforms|length > 1 ? craft.imager.srcset(source.transforms)  : lastTransform.url,
    }:{})) }}
    <!--[if IE 9]></audio><![endif]-->
  {% endfor %}
  
  {{ tag('img', {
    class: imageClass ~ ' ' ~ (imageLazyload ? 'lazyload no-js:hidden' : 'lazyloaded'),
    src: imageDefault.url,
    alt: imageAlt|e('html_attr'),
    width:  not imageIsResponsive ? imageDefault.width * imageScaleFactor,
    height: not imageIsResponsive ? imageDefault.height * imageScaleFactor,
    
  } | merge(imageLazyload ? {
    src: craft.imager.base64Pixel(imageDefault.width, imageDefault.height, imageColour),
    'data-src': imageDefault.url,
    
  }:{}) | merge(imageTransforms is defined and imageTransforms|length > 1 ? {
    sizes: imageSizesGuide ?? false,
    srcset: not imageLazyload ? craft.imager.srcset(imageTransforms) : false,
    'data-sizes': imageLazyload and not (imageSizesGuide ?? true) ? 'auto',
    'data-srcset': imageLazyload ? craft.imager.srcset(imageTransforms),
  }:{})) }}
  
  {% if imageSources|length %}
    </picture>
  {% endif %}
{% elseif imageAsset and imageIsCss %}
  {% minify css %}
    <style>
      .{{ imageCssClass }} {
        background-image: url('{{ imageDefault.url }}');
      }
      {% for source in imageSources|reverse %}
      @media {{ source.media }} {
        {{ (source.type ?? '') == 'image/webp' ? '.has-webp ' -}}
        .{{ imageCssClass }} {
          background-image: url('{{ (source.transforms|last).url }}');
        }
      }
      {% endfor %}
    </style>
  {% endminify %}
{% endif %}
