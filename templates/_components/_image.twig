{# _components/_image #}

{#
  Image

  Generate, transform, manipulate, optimize and render images.

  What it does
  ------------
  1. Auto-generates transforms and responsive images via `sizes` and
     `srcset` attributes 
  2. Auto-crops images if needed/specified
  3. Auto-generates art-directed responsive images using the `<picture>`
     and `<source>` tags
  4. Auto-generates WebP versions (if supported)
  5. Lazyload images using lazysizes
  6. Allows images to be specified as CSS class background images
  7. Allows use of different source images for different breakpoints
  8. And finally, renders the image

  How to use
  ----------
  Include the `_image` component with the following parameters where you
  want to display the image.

  Configuration parameters:
  @param   asset                {AssetFileModel}          [Required] Image asset to be rendered
  @param   breakpoint_assets    {array|AssetFileModel}    Image assets to be rendered for different breakpoints
  @param   preset               {string}                  Pre-defined image transformation configuration name
  @param   class                {string}                  Class attribute for the <img> tag
  @param   alt                  {string}                  Alt attribute for the <img> tag
  @param   background           {string}                  Class name for background image
  @param   lazyload             {bool}                    Whether to lazyload images (default: true)
  @param   webp                 {bool}                    Whether to generate WebP versions (default: true)

  Example of simple usage
  -----------------------
  ```
  <figure>
    {% include '_components/_image' with { params: {
      asset: image,
      class: 'profile-pic',
      preset: 'avatar',
    } } %}
  </figure>
  ```

  Example of usage with breakpoint asset
  --------------------------------------
  ```
  <figure>
  {% include '_components/_image' with { params: {
    asset: image,
    breakpoint_assets: {
      '--lg-plus': imageLarge,
      '--md-plus': imageMedium,
      '--sm-plus': imageSmall,
    },
  } } %}
  </figure>
  ```

  Set `presets`(a set of image transformation configurations) variable
  values in `_image` component. Define the desired preset values in the
  image component as shown in the examples below.

  Preset options
  --------------
  @option   media          {string}      Any valid media query that will be used in `media` attribute in the `<img>` tag
  @option   breakpoints    {array}       Transform values for different view breakpoints that will generate `source` tags
  @option   sizes          {array}       Image size values for different images to render in `srcset` attribute of the `<img>` tag
  @option   transform      {array}       Aspect and position related transform values
  @option   guide          {string}      Any valid media query that will be used in `sizes` attribute in the `<img>` tag

  Set `queries` variable to an array of valid media queries. It will be
  used to define different display device sizes. 

  Queries examples
  ---------------

  1)  Query used for `<img>` tag `media` attribute
      ```
      {% set queries = {
        '--xs-plus': '(min-width: 448px)',
        '--sm-plus': '(min-width: 900px)',
        '--md-plus': '(min-width: 1200px)',
      } %}
      {% set presets = {
        blog: {
          breakpoints: [{
            media: '--md-plus',
            sizes: [
              { width: 500 },
              { width: 600 },
              { width: 700 },
              { width: 800 },
            ],
            transform: { mode: 'crop', ratio: 0.9 },
          },{
            sizes: [
              { width: 400 },
              { width: 600 },
              { width: 900 },
            ],
            transform: { mode: 'crop', ratio: 1.1 },
          },
        ]}
      } %}
      ```
      
      HTML Output:
      ```
      <picture>
        <source
          width="800"
          height="889"
          media="(min-width: 1200px)"
          sizes="576px"
          srcset="small.png 500w, medium.png 600w, large.png 700w, x-large.png 800w">
        <img
          src="large.png"
          width
          height
          sizes="576px"
          srcset="small.png 400w, medium.png 600w, large.png 900w">
      </picture>
      ```

  2)  Query used for `<img>` tag `sizes` attribute
      ```
      {% set queries = {
        '--xs-plus': '(min-width: 700px)',
        '--sm-plus': '(min-width: 900px)',
        '--md-plus': '(min-width: 1188px)',
      } %}
      {% set presets = {
        logo: {
          sizes: [
            { width: 150 },
            { width: 300 },
          ],
          guide: '--md-plus 5rem, --xs-plus 4rem, 3.55rem',
        },
      } %}
      ```

      HTML Output:
      `<img
        src="medium.png"
        width="300"
        height="349"
        sizes="(min-width: 1188px) 5rem, (min-width: 700px) 4rem, 3.55rem"
        srcset="small.png 150w, medium.png 300w">`

  Preset examples
  ---------------

  1)  Simple size-based transforms (can be width, or height â€” everything
      that the Imager plugin supports)
      ```
      {% set presets = {
          avatar: {
            sizes: [
              { width: 20 },
              { width: 30 },
              { width: 40 },
              ],
            },	
      } %}
      ```

      HTML Output:
      `<img
         src="large.jpg"
         width="40"
         height="37"
         srcset="small.jpg 20w, medium.jpg 30w, large.jpg 40w">`

  2)  Size based transform with option to crop images
      ```
      {% set presets = {
        blog: {
          sizes: [
            { width: 400 },
            { width: 800 },
          ],
          transform: { mode: 'crop', ratio: 1.7 },
        },	
      } %}
      ```

      HTML Output:
      `<img
         src="large.jpg"
         width="800"
         height="471"
         srcset="small.jpg 400w, large.jpg 800w">`

  3)  Size based transform with different sizes based on render area sizes 
      ```
      {% set presets = {
        logo: {
          sizes: [
            { width: 150 },
            { width: 300 },
          ],
          guide: '(min-width: 1023px) 5rem, (min-width: 1920px) 8rem, 3.55rem',
        },
      } %}
      ```

      HTML Output:
      `<img
         src="medium.png"
         width="300"
         height="275"
         sizes="(min-width: 1023px) 5rem, (min-width: 1920px) 8rem, 3.55rem"
         srcset="small.png 150w, medium.png 300w">`

  4)  Art-directed images
      ```
      {% set queries = {
        '--xs-plus': '(min-width: 448px)',
        '--sm-plus': '(min-width: 900px)',
        '--md-plus': '(min-width: 1200px)',
      } %}
      {% set presets = {
        blog: {
          breakpoints: [{
            media: '--md-plus',
            sizes: [
              { width: 500 },
              { width: 600 },
              { width: 700 },
              { width: 800 },
            ],
            transform: { mode: 'crop', ratio: 0.9 },
          },{
            sizes: [
              { width: 400 },
              { width: 600 },
              { width: 900 },
            ],
            transform: { mode: 'crop', ratio: 1.1 },
          },
        ]}
      } %}
      ```

      HTML Output:
      ```
      <picture>
        <source
          width="800"
          height="889"
          media="(min-width: 1200px)"
          sizes="576px"
          srcset="small.png 500w, medium.png 600w, large.png 700w, x-large.png 800w">
        <img
          src="large.png"
          width height sizes="576px"
          srcset="small.png 400w, medium.png 600w, large.png 900w">
      </picture>
      ```
#}



{# Parameters #}
{% set imageAsset = params.asset ?? false %}
{% set imageBreakpointAssets = params.breakpoint_assets ?? {} %}
{% set imagePreset = params.preset ?? false %}
{% set imageClass = params.class ?? '' %}
{% set imageAlt = params.alt ?? false %}
{% set imageLazyload = params.lazyload ?? true %}
{% set imageIsCss = not not (params.background ?? false) %}
{% set imageCssClass = params.background ?? '' %}
{% set imageGenerateWebp = (params.webp ?? true) and craft.imager.serverSupportsWebp %}



{# Config #}
{% set queries = {
  '--xs-plus': '(min-width: 448px)',
  '--sm-plus': '(min-width: 900px)',
  '--md-plus': '(min-width: 1188px)',
  '--lg-plus': '(min-width: 1920px)',
  '--retina':  '(min-resolution: 192dpi)',
} %}
{% set presets = {} %}



{# Helpers #}
{% macro sortBreakpointPresets(presets, mediaQueryOrder) %}
  {% return presets
    |multisort(
      preset => mediaQueryOrder|indexOf(preset.media ?? ''),
      direction=SORT_DESC
    )
  %}
{% endmacro %}
{% from _self import sortBreakpointPresets %}



{# Biz logic #}
{% if imageAsset %}
  {% set imageDefault = null %}
  {% set imageSizesGuide = false %}
  {% set imageTransforms = [] %}
  {% set imageSources = [] %}
  {% set imageColour = 'transparent' %}
  {% set imageAlt = imageAlt ?: imageAsset.title %}
  {% set imageIsSvg = imageAsset.mimeType in ['image/svg+xml'] or imageAsset.extension in ['svg'] %}
  {% set imageIsAnimatedGif = imageAsset.extension in ['gif'] and craft.imager.isAnimated(imageAsset) %}
  {% set imageScaleFactor = imageIsSvg ? 100 : 1 %}

  {# Assign an empty preset, and a single breakpoint if one isn't defined #}
  {% set preset = presets[imagePreset] ?? {} %}
  {% set breakpoints = sortBreakpointPresets(preset.breakpoints ?? [preset], queries|keys) %}
  {% if devMode
    and imageAsset.mimeType not in ['image/svg+xml']
    and (imagePreset is empty or preset is empty)
  %}
    <span class="block bg-theme-red text-white all-caps">
      Warning: No Image Preset
    </span>
  {% endif %}
  
  {#
    Ensure all breakpoint asset overrides are present in the breakpoint presets
    and that all breakpoint presets use the correct asset for their transforms
  #}
  {% if imageBreakpointAssets is not empty %}
    {# Build list of used queries in order (relying on $queries to be min -> max) #}
    {% set _usedQueries = queries|keys
      |intersect(imageBreakpointAssets|keys
        |merge(breakpoints|column('media'))
        |filter
      )
    %}
    {% set _currentAsset = imageAsset %}
    {% set _currentPreset = breakpoints|last %}
    {% for mediaQuery in _usedQueries %}
      {% set _currentAsset = imageBreakpointAssets[mediaQuery] ?? _currentAsset %}
      {% set _currentPreset = breakpoints|where(p => p.media ?? '' == mediaQuery)|first ?: _currentPreset %}
      {% if imageBreakpointAssets[mediaQuery] is not defined %}
        {% set imageBreakpointAssets = imageBreakpointAssets|merge({ (mediaQuery): _currentAsset }) %}
      {% else %}{# this breakpoint doesn't have a preset, add one #}
        {% set breakpoints = breakpoints|merge([_currentPreset|merge({ media: mediaQuery })]) %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% set imageGenerateWebp = imageGenerateWebp and not craft.imager.isAnimated(imageAsset) %}
  {% set imageIsCwebpSupported = imageAsset.mimeType in ['image/jpeg', 'image/png', 'image/tiff']
    or imageAsset.extension in ['jpg', 'jpeg', 'jfif', 'pjpeg', 'pjp', 'png', 'tif', 'tiff'] %}
  
  {% for imagePreset in sortBreakpointPresets(breakpoints, queries|keys) %}
    {% set _imageAsset = imageBreakpointAssets
      and imagePreset.media is defined
      and imageBreakpointAssets[imagePreset.media] is defined
      ? imageBreakpointAssets[imagePreset.media]
      : imageAsset %}
    {% set imageIsSvg = _imageAsset.mimeType in ['image/svg+xml'] or _imageAsset.extension in ['svg'] %}
    {% set imageIsAnimatedGif = _imageAsset.extension in ['gif'] and craft.imager.isAnimated(_imageAsset) %}
    {% set imageScaleFactor = imageIsSvg ? 100 : 1 %}
    {% set imageSizesGuide = (imagePreset.guide ?? '')|replace(queries) ?: false %}
    {% set imageSourcesMedia = (imagePreset.media ?? '(min-width: 0)')|replace(queries) %}
    
    {% if not (imageIsSvg or imageIsAnimatedGif) %}
      {% set imageTransformSizes = imagePreset.sizes ?? [{ width: _imageAsset.width }] %}
      {% set imageTransformParams = {
        position: _imageAsset.getFocalPoint(),
      } | merge(imagePreset.transform ?? {}) %}
      {% set imageTransforms = craft.imager.transformImage(
        _imageAsset,
        imageTransformSizes,
        imageTransformParams
        ) %}
      {% set imageDefault = imageTransforms|last %}
      
      {# Generate WebP versions and put them before regular ones #}
      {% if imageGenerateWebp %}
        {% set imageTransformsWebP = craft.imager.transformImage(
          imageIsCwebpSupported
            ? _imageAsset
            : craft.imager.transformImage(_imageAsset, { format: 'png' }),
          imageTransformSizes,
          imageTransformParams|merge({ format: 'webp' })
        ) %}
        {% set imageSources = imageSources|merge([{
          type: 'image/webp',
          media: imageSourcesMedia,
          transforms: imageTransformsWebP,
        }]) %}
      {% endif %}
    {% else %}
      {% set imageTransforms = [_imageAsset] %}
      {% set imageDefault = _imageAsset %}
    {% endif %}
    
    {% if imagePreset.media is defined %}
      {% set imageSources = imageSources|merge([{
        media: imageSourcesMedia,
        transforms: imageTransforms,
      }]) %}
    {% endif %}
  {% endfor %}
{% else %}
  {% set imageDefault = imageAsset %}
{% endif %}
{% set imageIsResponsive = imageSources|length - (craft.imager.serverSupportsWebp ? 1 : 0) > 0 %}



{# Output #}
{% if imageAsset and not imageIsCss %}
  {% if imageSources|length %}
    <picture>
  {% endif %}
  
  {% if imageLazyload %}
    {# Non JS fallback #}
    <noscript>
      {{ tag('img', {
        class: imageClass,
        src: imageDefault.url,
        alt: imageAlt|e('html_attr'),
        width: imageDefault.width * imageScaleFactor,
        height: imageDefault.height * imageScaleFactor,
      }) }}
    </noscript>
  {% endif %}
  
  {% for source in imageSources %}
    {% set lastTransform = source.transforms|last %}
    <!--[if IE 9]><audio><![endif]-->
    {{ tag('source', {
      media: source.media,
      type: source.type ?? false,
      width: lastTransform.width,
      height: lastTransform.height,
      srcset: source.transforms|length > 1 ? craft.imager.srcset(source.transforms) : lastTransform.url,
      
    } | merge(imageLazyload ? {
      srcset: craft.imager.placeholder({
        width: lastTransform.width,
        height: lastTransform.height,
        color: imageColour
      }),
      'data-srcset': source.transforms|length > 1 ? craft.imager.srcset(source.transforms)  : lastTransform.url,
    }:{})) }}
    <!--[if IE 9]></audio><![endif]-->
  {% endfor %}
  
  {{ tag('img', {
    class: imageClass ~ ' ' ~ (imageLazyload ? 'lazyload no-js:hidden' : 'lazyloaded'),
    src: imageDefault.url,
    alt: imageAlt|e('html_attr'),
    width:  not imageIsResponsive ? imageDefault.width * imageScaleFactor,
    height: not imageIsResponsive ? imageDefault.height * imageScaleFactor,
    
  } | merge(imageLazyload ? {
    src: craft.imager.base64Pixel(imageDefault.width, imageDefault.height, imageColour),
    'data-src': imageDefault.url,
    
  }:{}) | merge(imageTransforms is defined and imageTransforms|length > 1 ? {
    sizes: imageSizesGuide ?? false,
    srcset: not imageLazyload ? craft.imager.srcset(imageTransforms) : false,
    'data-sizes': imageLazyload and not (imageSizesGuide ?? true) ? 'auto',
    'data-srcset': imageLazyload ? craft.imager.srcset(imageTransforms),
  }:{})) }}
  
  {% if imageSources|length %}
    </picture>
  {% endif %}
{% elseif imageAsset and imageIsCss %}
  {% minify css %}
    <style>
      .{{ imageCssClass }} {
        background-image: url('{{ imageDefault.url }}');
      }
      {% for source in imageSources|reverse %}
      @media {{ source.media }} {
        {{ (source.type ?? '') == 'image/webp' ? '.has-webp ' -}}
        .{{ imageCssClass }} {
          background-image: url('{{ (source.transforms|last).url }}');
        }
      }
      {% endfor %}
    </style>
  {% endminify %}
{% endif %}
